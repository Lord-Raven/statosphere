# All of these fields are optional, as is this file itself,
#   in which case these values can be managed in the UI.

# The name of the stage.
project_name: "Statosphere"

tagline: "Give your bots variables and launch them into...the Stat-O-Sphere! (phere) (ere)"

creator_notes: "
This is a stage for creating custom variables and rules for stat-tracking, behavior reinforcement, or complex scenario implementation. 
_Up front, this is pretty experimental; it may become unstable and it may not be for the faint of heart,_ 
but if you've been thinking about playing with a stage of your own, this may be a less daunting entrypoint. 
<br>
<br>
(There are a lot of notes and a Chub bug here; if you don't see a \"Show More\" button, try refreshing the page 'til it appears, so you can view all of the notes.)
<br>
<br>
This stage comprises five core elements:<br>
<ul>
<li>Variable definitions with various update phases
<li>JavaScript function definitions for creating complex, re-usable logic
<li>Zero-shot classification rules to draw inferences from inputs or responses and apply updates to variables as a result
<li>Generators which make LLM calls to request additional content
<li>Content modification rules which alter input, response, post-input/response (which are \"system messages\" that display in-chat but do not persist to the LLM), and stage directions (additional LLM instruction), all based on specified conditions
</ul>
<br>
**Example Applications**<br>
This stage has no default configuration and will do nothing on its own. However, through configuration, a wide variety of effects are possible:<br>
<ul>
<li>Stat tracking and display: use inference to roughly gauge changes present in the input or response and translate that into numbers to apply to variables
<li>Scenario escalation: use pre-input updates to increase a turn variable, then add prompt rules to feed updated scenario data as time marches on--go crazy and use inference to adjust the pace of escalation
<li>Rule or behavior reinforcement: apply classifiers or keywords to remind the LLM of your bot's quirks when the user's input should trigger them
<li>Dynamic response guidance: use inference to detect the nature of the user's input and ask the bot to focus its writing in different ways: is the user examining something? Instruct the bot to be descriptive. Is the user trying to move on? Tell the bot to introduce the next scene.
<li>Input clean-up: use regex to strip bracketed LLM instruction from the user's input and embed it into stage directions so it doesn't appear in the chat and is only included in the current prompt
<li>Content generation and management: randomize values for variables to build procedural content or use generators to request creative content from the LLM
<li>Show up one of my other stages: both [Crunchatize](https://venus.chub.ai/extensions/Ravenok/crunchatize-77a78ffcc6a6) and [Alien Infestation](https://venus.chub.ai/extensions/Ravenok/alien-infestation-04c7448f1d14) could be entirely achieved through the functionality offered here
<li>These are just ideas; there are likely all kinds of creative and insane applications
</ul>
<br>
**Build Your Own Experience**<br>
There are two steps to using this stage: adding it and configuring it. You can add a stage to a specific chat by viewing the chat's settings and searching for Statosphere in the stage dropdown. 
You can also add a stage to a bot that you own from the bot's page--there is a Stages section below the Gallery. 
Stages added to the bot itself will apply to everyone who starts a chat with that bot (although the stage can be disabled by the user in their chat settings); 
for this reason, I recommend bot-makers test out Statosphere configuration on a specific chat before applying it to a public bot.
<br>
<br>
Once this stage has been added to a chat or bot, it must be configured in order to do anything. Chub's stage configuration UI was not quite prepared for the elaborate requirements of this stage, 
so the configuration modal here in Chub is a single blank where you will paste some JSON.
<br>
<br>
Don't worry! You don't have to (and shouldn't!) handcraft any JSON to paste in there; I've created [an external tool](https://lord-raven.github.io/statosphere-editor/) 
that will produce JSON that you can copy and paste into the stage's configuration. You can also drop configuration from your bot (or others'!) into the tool to make modifications. 
The general workflow is building your desired functionality in the editor, hitting the copy button at the bottom, pasting into the stage configuration modal, and refreshing the chat to pull in those changes. 
<br>
<br>
There is a lot of debugging output in the console, especially when something does not load or work as expected; I'll continue to improve this aspect, 
but I think there's usually enough information to indicate approximately where any problems lie.
<br>
<br>
If you have other questions about this stage or stages in general, feel free to DM me on the Chub Discord: ravenok31.
<br>
<br>
**Inference Details**<br>
This stage makes API calls to a [Hugging Face Space](https://huggingface.co/spaces/Ravenok/statosphere-backend) that I have set up to leverage a zero-shot classification model. 
If this backend is unavailable or some other error occurs in calling it, the stage will swap to applying a very small, local, zero-shot model, and the results will be decidedly inferior.
<br>
<br>
It is currently running on HF's Zero GPU and can burn through my daily quota; if it does, request times will go up a bit as it falls back to CPU. 
The backend drops REST calls from origins other than my own stages in a simple attempt to thwart abuse, because I am paying to support it. 
It is open source now, so you can see how it has been set up (there really isn't much to it) and verify for yourself that I'm not logging request details or anything nefarious.
<br>
<br>
**Pitfalls**<br>
As excited as I am to present this, it is, unfortunately, a \"bot-maker beware\" sort of stage. There are a number of items that could warrant concern, which you may wish to consider before working with this stage:<br>
<ul>
<li>Chub exclusivity: remember that stages are a feature of Chub's front-end, and anyone playing your bot in another front-end will not benefit; you may wish to point this out in your creator notes, if you have used this stage to cultivate an intended experience.
<li>Version history: the stage's configuration does appear in version history on Chub, but updates to configuration do not appear to create a new entry in the version history--it could be easy to accidentally blow away your configuration with little recourse.
<li>Obfuscation: this stage can implement some interesting behaviors, but those behaviors may no longer be represented within the bot's definition; savvy users can disable or inspect the stage's configuration, but most users are unlikely to even recognize that a stage is in play--please consider mentioning it in the bot's creator notes.
<li>Configuration is public: on the other hand, because users can still view your stage configuration, any cool thing you make with this stage will not remain proprietary--of course, the same goes for any bot on the site.
<li>Malicious intent: because the stage is nearly opaque and it does offer powerful options--including evaluation of custom JavaScript functions--, I have some nebulous concern about the potential for abuse.
<li>Generators make additional LLM calls: consider warning users if your bot is leveraging this feature, as it will lead to slower responses and increased token utilization.
<li>Stages are a beta feature: I imagine this stage could be broken by future Chub updates; bear in mind that your bot's experience could be negatively impacted in that event.
</ul>
<br>
**Updates**<br>
08/04/2025 - Very minor; I added a new built-in function for something I'm working on: substring.
06/04/2025 - Added conditions to individual classifications on classifier tasks, so that unnecessary labels can be removed from consideration. <br>
05/03/2025 - Moved some documentation over to the configuration tool. It's still very light, but I've decided that's where I'll house it. Renamed some variable properties to be more intuitive. 
Removed some work-in-progress sound/music handling that I don't think I'll continue implementing here--too many issues associated with it. <br>
04/29/2025 - Updates to accommodate multiplayer. Behavior could seem volatile; when a user prompts the AI, that user becomes the current user for all of the stage's {{user}} references until another user provides input.<br>
04/11/2025 - I made the Hugging Face backend public today, to improve transparency for this aspect of the stage. I made some updates to these notes to reflect that and clean up some dated information.<br>
04/05/2025 - Minor changes to properly set scope for background definition purposes. Also changed how stage directions are designated.<br>
03/30/2025 - Updated the HF backend this stage leverages and had to update the Gradio client here. I broke inference for several hours but it's back up and should perform better than before. I might toy with other models, but I'm pretty happy with the performance boost for now.<br>
03/05/2025 - The stage will now attempt to re-establish a connection to the back-end if it fails to respond, rather than enter fallback mode until refresh. I addressed a duplicate function error that would appear in the log. Also made improvements to the configuration tool's classifier testing.<br>
01/06/2025 - Added a pre-response update field to variables; \"per turn\" is now \"pre-input\" and the new pre-response field works similarly but for responses--these run prior to response classifiers. Also updated stages version.
<br>
<br>
**What's Next?**<br>
This stage represents nearly all the essential features I feel I can achieve without further improvements to Chub's stage system. There is certainly room for further improvement within this (or with the configuration editor), 
but my primary outstanding goals are dependent upon presumed features that will hopefully become a reality some day.<br>
<br>
Perhaps future Stage improvements will permit stages to easily swap between positions, and I can add functionality for displaying content in other places? 
Maybe it will be easier to capture lorebook or other bot details within the stage, and I could enable creators to leverage that data in who knows what kind of interesting ways? 
Could be the chat tree will become accessible, and you could do...something, I'm sure? Whatever comes, I will try to keep this stage on top of it, 
because I think this kind of stage holds value for people who want to play with these concepts but who don't want to build out their own stage to do so.
"

# 'PUBLIC', 'PRIVATE', or 'UNLISTED'.
visibility: 'PUBLIC'

# 'ADJACENT' | 'NONE' | 'COVER' | 'FULLSCREEN'
# 'ADJACENT' is default. The frame will display on the side of the
#   chat on desktop and above/in the top half of the chat on mobile.
# 'NONE' will not display, only run.
# 'COVER' will, indeed, cover the chat history completely,
#   but leave the text input box.
# 'FULLSCREEN' will make nothing below the header bar
#   show except for your stage.
position: 'NONE'

# Self-explanatory.
tags:
 - 'Stage'
 - 'Utility'
 - 'Stats'

# The schema of any user-supplied config.
# If your stage requires a configuration but has no
#   defined schema, it won't work.
# source: input/response/both
config_schema:
  title: Statosphere Settings
  type: object
  properties:
    configJson:
      title: Configuration
      description: Drop JSON from the Statosphere editor here--or paste this into the editor to make changes.
      type: string
      value: >
        {}

# The schema of the state that you store.
# This isn't needed even if you do store state,
#   and is here more for future use cases to
#   optimize storage.
state_schema:
  init:
    type: object
    properties:
      grid:
        type: string
  message:
    type: object
    properties:
      angry:
        type: boolean
        default: true
  chat:
    type: object
    properties:
      visited:
        type: array
        items:
          type: integer

# Whether to publish as 'Anonymous' instead of under your username.
# is_anonymous: false

# Self-explanatory.
# ratings_disabled: false

# This is here for future cases where ex. you need user secrets,
#    but currently does nothing.
# permissions:

# extension_id is automatically generated on push with a new project;
#    you should not make or set this value.
# github_path will be added if it does not exist. It is the URL of the repo.


github_path: 'https://github.com/Lord-Raven/statosphere'


extension_id: 'statosphere-3704059fdd7e'

